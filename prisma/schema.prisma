// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Section {
    id    Int    @id @default(autoincrement())
    title String

    html String
    css  String
    js   String

    siteId Int
    site   Site @relation(fields: [siteId], references: [id])

    // keys     String[]
    contents SectionContent[]
}

model SectionContent {
    id       Int    @id @default(autoincrement())
    langCode String
    content  Json

    sectionId Int
    section   Section @relation(fields: [sectionId], references: [id])

    @@unique([sectionId, langCode])
}

model Site {
    id Int @id @default(autoincrement())

    slug String @unique

    title       String
    description String
    keywords    String

    sections Section[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// model InfoEntry {
//     id   Int    @id @default(autoincrement())
//     slug String @unique

//     contents InfoEntryLanguageRelatedContent[]

//     kind String

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// model InfoEntryLanguageRelatedContent {
//     id Int @id @default(autoincrement())

//     langCode String @unique

//     title    String
//     subtitle String
//     author   String
//     content  String

//     infoEntry   InfoEntry? @relation(fields: [infoEntryId], references: [id])
//     infoEntryId Int

//     @@unique([langCode, id])
// }

// Event und Speaker Modelle wurden entfernt

model Post {
    id          Int      @id @default(autoincrement())
    title       String
    slug        String   @unique
    content     String
    language    String
    publishedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt
    coverImage  String? // Optionales Cover-Bild
    authorId    Int
    author      User     @relation(fields: [authorId], references: [id])
}

model User {
    id     Int     @id @default(autoincrement())
    name   String
    avatar String?
    posts  Post[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    author    String
    role      String?
    comment   String
    avatar    String   @default("/placeholder.webp")
    language  String   @default("en") // "de", "en", "it"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Link {
    id   Int    @id @default(autoincrement())
    name String
    url  String
}

model Navbar {
    id             Int     @id @default(autoincrement())
    language       String  @db.VarChar(10)
    text           String
    href           String
    onLanguageSlug Boolean
}

model Admin {
    id                   Int      @id @default(autoincrement())
    username             String   @unique
    passwordHash         String
    role                 Role     @default(EDITOR)
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    acceptedBySuperAdmin Boolean  @default(false)
}

enum Role {
    SUPERADMIN
    EDITOR
}

model Book {
    id        Int         @id @default(autoincrement())
    title     String
    author    String
    published DateTime
    content   String // Der eigentliche Text als HTML
    language  String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    covers    BookCover[] // Mehrere Coverbilder
    links     BookLink[] // Mehrere Links
}

model BookCover {
    id     Int    @id @default(autoincrement())
    path   String
    bookId Int
    book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model BookLink {
    id     Int    @id @default(autoincrement())
    url    String
    bookId Int
    book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model MapPointType {
    id          Int        @id @default(autoincrement())
    name        String     @unique
    description String?
    mapPoints   MapPoint[]
}

model MapPoint {
    id          Int          @id @default(autoincrement())
    name        String
    description String?
    typeId      Int
    type        MapPointType @relation(fields: [typeId], references: [id])
    // Optional coordinates
    latitude    Float
    longitude   Float
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Celebrity {
    id         Int       @id @default(autoincrement())
    name       String
    profession String
    born       DateTime
    died       DateTime?
    alsYear    Int // Jahr der ALS-Diagnose
    bio        String // Kurzbiografie
    image      String? // URL zum Bild
}
