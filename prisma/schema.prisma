// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Section {
    id    Int    @id @default(autoincrement())
    title String

    html String
    css  String
    js   String

    siteId Int
    site   Site @relation(fields: [siteId], references: [id])

    // keys     String[]
    contents SectionContent[]
}

model SectionContent {
    id       Int    @id @default(autoincrement())
    langCode String
    content  Json

    sectionId Int
    section   Section @relation(fields: [sectionId], references: [id])

    @@unique([sectionId, langCode])
}

model Site {
    id Int @id @default(autoincrement())

    slug String @unique

    title       String
    description String
    keywords    String

    sections Section[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

model InfoEntry {
    id   Int    @id @default(autoincrement())
    slug String @unique

    contents InfoEntryLanguageRelatedContent[]

    kind String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model InfoEntryLanguageRelatedContent {
    id Int @id @default(autoincrement())

    langCode String @unique

    title    String
    subtitle String
    author   String
    content  String

    infoEntry   InfoEntry? @relation(fields: [infoEntryId], references: [id])
    infoEntryId Int

    @@unique([langCode, id])
}

model Event {
    id                  Int       @id @default(autoincrement())
    title               String
    date                DateTime
    location            String
    description         String
    detailedDescription String?
    image               String
    slug                String    @unique
    category            String?
    language            String?   @default("en") // "de", "en" oder "it"
    schedule            Json? // JSON f√ºr Event-Ablauf (optional)
    ticketsUrl          String?
    speakers            Speaker[]
    createdAt           DateTime  @default(now())
    updatedAt           DateTime  @updatedAt
}

model Speaker {
    id      Int    @id @default(autoincrement())
    name    String
    bio     String
    image   String
    eventId Int
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Post {
    id          Int      @id @default(autoincrement())
    title       String
    slug        String   @unique
    content     String
    language    String
    publishedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt
    coverImage  String? // Optionales Cover-Bild
    authorId    Int
    author      User     @relation(fields: [authorId], references: [id])
}

model User {
    id     Int     @id @default(autoincrement())
    name   String
    avatar String?
    posts  Post[]
}

model Comment {
    id        Int      @id @default(autoincrement())
    author    String
    role      String?
    comment   String
    avatar    String   @default("/placeholder.webp")
    language  String   @default("en") // "de", "en", "it"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
