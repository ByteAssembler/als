// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model RawTranslation {
    id           Int           @id @default(autoincrement())
    translations Translation[]

    linkNames             Link[]             @relation("LinkName")
    linkDescriptions      Link[]             @relation("LinkDescription")
    navbarTexts           Navbar[]           @relation("NavbarText")
    mapPointCategoryNames MapPointCategory[] @relation("MapPointCategoryName")
    mapPointNames         MapPoint[]         @relation("MapPointName")
    mapPointDescriptions  MapPoint[]         @relation("MapPointDescription")
    celebrityBios         Celebrity[]        @relation("CelebrityBio")
    celebrityProfessions  Celebrity[]        @relation("CelebrityProfession")
    blogTitles            Blog[]             @relation("BlogTitle")
    blogContents          Blog[]             @relation("BlogContent")
    bookTitles            Book[]             @relation("BookTitle")
    bookContents          Book[]             @relation("BookContent")
    mediaItemAltTexts     MediaItem[]        @relation("MediaItemAltText")
    mediaItemCaptions     MediaItem[]        @relation("MediaItemCaption")
}

model Translation {
    id       Int    @id @default(autoincrement())
    language String @default("en") @db.VarChar(5)
    value    String

    rawTranslationId Int
    rawTranslation   RawTranslation @relation(fields: [rawTranslationId], references: [id], onDelete: Cascade)

    @@unique([language, rawTranslationId])
}

model Blog {
    id Int @id @default(autoincrement())

    titleRawTranslationId Int
    title                 RawTranslation @relation("BlogTitle", fields: [titleRawTranslationId], references: [id], onDelete: Cascade)
    slug                  String         @unique

    authors String[]

    contentRawTranslationId Int
    content                 RawTranslation @relation("BlogContent", fields: [contentRawTranslationId], references: [id], onDelete: Cascade)

    coverImageId String?
    coverImage   MediaItem? @relation("BlogCoverImage", fields: [coverImageId], references: [storageKey], onDelete: SetNull)

    publishedAt DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Link {
    id Int @id @default(autoincrement())

    nameRawTranslationId        Int
    name                        RawTranslation  @relation("LinkName", fields: [nameRawTranslationId], references: [id], onDelete: Cascade)
    descriptionRawTranslationId Int?
    description                 RawTranslation? @relation("LinkDescription", fields: [descriptionRawTranslationId], references: [id], onDelete: SetNull)

    url String
}

model Navbar {
    id Int @id @default(autoincrement())

    textRawTranslationId Int
    text                 RawTranslation @relation("NavbarText", fields: [textRawTranslationId], references: [id], onDelete: Cascade)
    href                 String

    withLanguagePrefix Boolean
}

model User {
    id   Int    @id @default(autoincrement())
    name String

    email        String @unique
    passwordHash String

    role Role @default(EDITOR)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    uploadedMediaItems MediaItem[]
}

enum Role {
    SUPERADMIN
    ADMIN
    MODERATOR
    EDITOR
}

model Book {
    id Int @id @default(autoincrement())

    titleRawTranslationId Int
    title                 RawTranslation @relation("BookTitle", fields: [titleRawTranslationId], references: [id], onDelete: Cascade)
    author                String

    coverImageId String?
    coverImage   MediaItem? @relation("BookCoverImage", fields: [coverImageId], references: [storageKey], onDelete: SetNull)

    isbn String? @unique

    published DateTime

    contentRawTranslationId Int
    content                 RawTranslation @relation("BookContent", fields: [contentRawTranslationId], references: [id], onDelete: Cascade)

    links String[]
}

model MapPointCategory {
    id Int @id @default(autoincrement())

    nameRawTranslationId Int
    name                 RawTranslation @relation("MapPointCategoryName", fields: [nameRawTranslationId], references: [id], onDelete: Cascade)

    mapPoints MapPoint[]
}

model MapPoint {
    id Int @id @default(autoincrement())

    nameRawTranslationId        Int
    name                        RawTranslation  @relation("MapPointName", fields: [nameRawTranslationId], references: [id], onDelete: Cascade)
    descriptionRawTranslationId Int?
    description                 RawTranslation? @relation("MapPointDescription", fields: [descriptionRawTranslationId], references: [id], onDelete: SetNull)

    categoryId Int
    category   MapPointCategory @relation(fields: [categoryId], references: [id])

    latitude  Float
    longitude Float

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Celebrity {
    id Int @id @default(autoincrement())

    imageId String?
    image   MediaItem? @relation("CelebrityImage", fields: [imageId], references: [storageKey], onDelete: SetNull)

    name                       String
    bioRawTranslationId        Int
    bio                        RawTranslation @relation("CelebrityBio", fields: [bioRawTranslationId], references: [id], onDelete: Cascade)
    professionRawTranslationId Int
    profession                 RawTranslation @relation("CelebrityProfession", fields: [professionRawTranslationId], references: [id], onDelete: Cascade)

    born DateTime
    died DateTime?

    alsYear Int
}

model MediaItem {
    storageKey String @id
    filename   String
    mimeType   String
    size       Int
    width      Int?
    height     Int?

    altTextRawTranslationId Int?
    altText                 RawTranslation? @relation("MediaItemAltText", fields: [altTextRawTranslationId], references: [id], onDelete: SetNull)

    captionRawTranslationId Int?
    caption                 RawTranslation? @relation("MediaItemCaption", fields: [captionRawTranslationId], references: [id], onDelete: SetNull)

    uploadedAt DateTime @default(now())

    uploaderId Int?
    uploader   User? @relation(fields: [uploaderId], references: [id], onDelete: SetNull)

    showInMediaGallery Boolean @default(false)
    mediaType          String?

    blogsAsCover       Blog[]      @relation("BlogCoverImage")
    booksAsCover       Book[]      @relation("BookCoverImage")
    celebritiesAsImage Celebrity[] @relation("CelebrityImage")
}
