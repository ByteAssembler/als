---
import fs from "fs/promises";
import Layout from "../../layouts/Layout.astro";


const mediaDir = "public/media";

// Check if the media directory exists
const mediaDirExists = await fs
	.access(mediaDir)
	.then(() => true)
	.catch(() => false);

// Get all media files
const mediaFiles = mediaDirExists ? await fs.readdir(mediaDir) : [];

const audioExtensions = [".mp3", ".wav", ".ogg"];
const videoExtensions = [".mp4", ".mkv", ".webm"];
const imageExtensions = [".jpg", ".jpeg", ".png", ".gif", ".webp"];
const infomationFilesExtensions = [".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx", ".odt", ".ods", ".odp", ".txt", ".rtf", ".csv", ".xml", ".json"];
// Helper to remove file extension
function removeExtension(filename: string) {
	return filename.replace(/\.[^/.]+$/, "");
}

// Sort files into categories
const audios = mediaFiles.filter((file) =>
	audioExtensions.some((ext) => file.toLowerCase().endsWith(ext)),
);

const videos = mediaFiles.filter((file) =>
	videoExtensions.some((ext) => file.toLowerCase().endsWith(ext)),
);

const images = mediaFiles.filter((file) =>
	imageExtensions.some((ext) => file.toLowerCase().endsWith(ext)),
);

const informationFiles = mediaFiles.filter((file) =>
    infomationFilesExtensions.some((ext) => file.toLowerCase().endsWith(ext)),
);

const { lang } = Astro.params;
---

<Layout title="Medien" defaultPadding={true} showTitle={true}>
	<div
		class="mx-auto mt-10 max-w-4xl rounded-lg bg-white p-6 pt-10 shadow-md"
	>
		<h1 class="mb-4 text-2xl font-bold">Medien</h1>

		<ul class="space-y-2">
			<li class="border-b pb-2">
				<a
					class="text-blue-900 hover:underline"
					href={"/" + (lang ? lang : "/en") + "/books"}
				>
					BÃ¼cher
				</a>
			</li>
		</ul>

        {audios.length > 0 &&
		<h2 class="mt-6 text-xl font-semibold">Audios</h2>
		<ul class="space-y-2">
			{
				audios.map((file) => (
					<li class="border-b pb-2">
						<a
							href={`/media/${file}`}
							target="_blank"
							class="text-blue-500 hover:underline"
						>
							{removeExtension(file)}
						</a>
					</li>
				))
			}
		</ul>}
        {videos.length > 0 &&
		<h2 class="mt-6 text-xl font-semibold">Videos</h2>
		<ul class="space-y-2">
			{
				videos.map((file) => (
					<li class="border-b pb-2">
						<a
							href={`/media/${file}`}
							target="_blank"
							class="text-blue-500 hover:underline"
						>
							{removeExtension(file)}
						</a>
					</li>
				))
			}
		</ul>
        }
        {images.length > 0 &&
		<h2 class="mt-6 text-xl font-semibold">Bilder</h2>
		<ul class="space-y-2">
			{
				images.map((file) => (
					<li class="border-b pb-2">
						<a
							href={`/media/${file}`}
							target="_blank"
							class="text-blue-500 hover:underline"
						>
							{removeExtension(file)}
						</a>
					</li>
				))
			}
		</ul>
        }
        {informationFiles.length > 0 &&
        <h2 class="mt-6 text-xl font-semibold">Informationen</h2>
            
            <ul class="space-y-2">
                {
                    informationFiles.map((file) => (
                        <li class="border-b pb-2">
                            <a
                                href={`/media/${file}`}
                                target="_blank"
                                class="text-blue-500 hover:underline"
                            >
                                {removeExtension(file)}
                            </a>
                        </li>
                    ))
                }
            </ul>
        }
	</div>
</Layout>
