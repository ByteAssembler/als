---
import { i18n } from "@/i18n";
import Layout from "@/layouts/Layout.astro";
import { fetchDataFromServer } from "../api/trpc/serverHelpers";

const lang = Astro.locals.lang;

// These should be configured in your Astro project, e.g., via .env files
// Ensure they are prefixed with PUBLIC_ if accessed on the client, or handle them server-side.
const fileServerEndpointFull = import.meta.env.PUBLIC_FILE_STORAGE_SERVER_ENDPOINT_FULL;
const bucketName = import.meta.env.PUBLIC_MINIO_BUCKET_NAME;
const fileBaseUrl = `${fileServerEndpointFull}/${bucketName}`;

// Fetches data like: { "audios": [fileObj1, fileObj2], "images": [...], ... }
const mediaFiles = await fetchDataFromServer("filemanager.public-media");

function removeExtension(filename: string) {
    return filename.replace(/\.[^/.]+$/, "");
}

const categoryIcons: Record<string, string> = {
    default: "📁",
    books: "📚",
    audios: "🎧",
    images: "🖼️",
    videos: "🎬",
    documents: "📄",
    information: "📄", // Alias for 'information' if that key is used
};

function getCategoryIcon(categoryKey: string): string {
    return categoryIcons[categoryKey.toLowerCase()] || categoryIcons.default;
}

const categories = mediaFiles ? Object.keys(mediaFiles) : [];
---

<Layout title={i18n.tLang(lang, "pages.media.pageTitle")} defaultPadding={true} showTitle={true}>
    <div class="max-w-3xl mx-auto p-6 flex flex-col gap-6">
        {
            mediaFiles &&
                Object.entries(mediaFiles).map(([category, files]: [string, any[]]) => {
                    const categoryTitle = "i18n.tLang(lang, `pages.media.categories.${category}.title`);";
                    const emptyCategoryText = "i18n.tLang(lang, `pages.media.categories.${category}.empty`);";
                    const icon = getCategoryIcon(category);
                    const isImageCategory = category.toLowerCase() === "images"; // Or check based on file types if mixed

                    return (
                        <>
                            <button
                                type="button"
                                class="bg-blue-400 p-6 rounded-xl text-xl font-semibold hover:bg-blue-500 transition text-black dark:text-white dark:hover:bg-blue-500"
                                onclick={`toggleSection('${category}')`}
                            >
                                {icon} {categoryTitle}
                            </button>
                            <div id={category} class="hidden pl-6">
                                {files.length > 0 ? (
                                    <ul class="space-y-2">
                                        {files.map((file) => {
                                            const displayName = file.name.substring(file.name.lastIndexOf("/") + 1);
                                            const fullUrl = `${fileBaseUrl}/${file.name}`;
                                            // Use file.etag or another unique identifier if available and needed for specific functionality
                                            const fileId = file.etag || file.name;

                                            let onclickAction;
                                            if (file.mediaType?.startsWith("image/")) {
                                                onclickAction = `event.preventDefault(); showImageModal('${displayName}', '${fullUrl}');`;
                                            } else {
                                                onclickAction = `return showMedia(event, '${category}', '${fileId}', '${displayName}', '${fullUrl}', '${file.mediaType || ""}')`;
                                            }

                                            return (
                                                <li>
                                                    <a
                                                        href={fullUrl}
                                                        class="text-blue-600 dark:text-blue-400 hover:underline"
                                                        onclick={onclickAction}
                                                        target={
                                                            file.mediaType?.startsWith("image/") ? "_self" : "_blank"
                                                        }
                                                        rel="noopener noreferrer"
                                                    >
                                                        {removeExtension(displayName)}
                                                    </a>
                                                </li>
                                            );
                                        })}
                                    </ul>
                                ) : (
                                    <p class="text-gray-500 dark:text-gray-400">{emptyCategoryText}</p>
                                )}
                                <div id={`viewer-${category}`} class="mt-2" />
                            </div>
                        </>
                    );
                })
        }
        {
            (!mediaFiles || Object.keys(mediaFiles).length === 0) && (
                <p class="text-gray-600 dark:text-gray-300 text-center py-10">
                    {i18n.tLang(lang, "pages.media.noContent")}
                </p>
            )
        }
    </div>

    <!-- Modal für Bildanzeige (bleibt global) -->
    <div id="image-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden p-4">
        <div
            class="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] relative flex flex-col sm:flex-row"
        >
            {/* <!-- Bildanzeige --> */}
            <div class="flex-1 overflow-auto p-4 flex items-center justify-center min-h-[200px] sm:min-h-0">
                <img
                    id="modal-image"
                    src=""
                    alt=""
                    class="max-w-full max-h-[calc(90vh-150px)] sm:max-h-[calc(90vh-80px)] rounded-lg object-contain"
                />
            </div>
            {/* <!-- Menü rechts --> */}
            <div
                class="w-full sm:w-48 bg-gray-100 dark:bg-gray-700 border-t sm:border-t-0 sm:border-l border-gray-300 dark:border-gray-600 p-4 flex flex-col justify-between"
            >
                <div class="space-y-3">
                    <h3
                        id="modal-filename"
                        class="text-lg font-semibold text-gray-800 dark:text-gray-100 truncate"
                        title=""
                    >
                    </h3>
                    <a
                        id="modal-download"
                        class="text-blue-600 dark:text-blue-400 hover:underline block"
                        href="#"
                        download
                    >
                        ⬇ {i18n.tLang(lang, "pages.media.actions.download")}
                    </a>
                    <a
                        id="modal-open"
                        class="text-blue-600 dark:text-blue-400 hover:underline block"
                        href="#"
                        target="_blank"
                        rel="noopener noreferrer"
                    >
                        🌐 {i18n.tLang(lang, "pages.media.actions.openInNewTab")}
                    </a>
                </div>
                <button
                    onclick="closeImageModal()"
                    class="mt-4 bg-red-500 hover:bg-red-600 text-white py-2 px-4 rounded w-full"
                >
                    {i18n.tLang(lang, "pages.media.actions.close")}
                </button>
            </div>
        </div>
    </div>

    <script
        define:vars={{
            categories: JSON.stringify(categories),
            i18nNoPreview: i18n.tLang(lang, "pages.media.noPreview"),
            i18nOpenFile: i18n.tLang(lang, "pages.media.openFile"),
        }}
        is:inline
    >
        const dynamicCategories = JSON.parse(categories);

        function toggleSection(id) {
            dynamicCategories.forEach((sectionId) => {
                const el = document.getElementById(sectionId);
                if (!el) return;
                const viewer = document.getElementById("viewer-" + sectionId);

                if (sectionId === id) {
                    el.classList.toggle("hidden");
                    // If we are hiding the section, also clear its viewer
                    if (el.classList.contains("hidden") && viewer) {
                        viewer.innerHTML = "";
                        viewer.style.display = "none";
                        if (viewer.dataset) viewer.dataset.currentId = "";
                    }
                } else {
                    el.classList.add("hidden");
                    if (viewer) {
                        viewer.innerHTML = "";
                        viewer.style.display = "none";
                        if (viewer.dataset) viewer.dataset.currentId = "";
                    }
                }
            });
        }

        function showImageModal(filename, url) {
            const modal = document.getElementById("image-modal");
            const modalImage = document.getElementById("modal-image");
            const modalDownload = document.getElementById("modal-download");
            const modalOpen = document.getElementById("modal-open");
            const modalFilename = document.getElementById("modal-filename");

            modalImage.src = url;
            modalImage.alt = filename;
            modalFilename.textContent = filename;
            modalFilename.title = filename;
            modalDownload.href = url;
            modalDownload.download = filename;
            modalOpen.href = url;
            modalOpen.target = "_blank"; // Ensure it opens in a new tab

            modal.classList.remove("hidden");
            document.body.style.overflow = "hidden"; // Prevent background scrolling
        }

        function closeImageModal() {
            document.getElementById("image-modal").classList.add("hidden");
            const modalImage = document.getElementById("modal-image");
            modalImage.src = ""; // Clear image src to prevent loading issues
            document.body.style.overflow = ""; // Restore background scrolling
        }

        // Close modal on escape key
        document.addEventListener("keydown", function (event) {
            if (event.key === "Escape") {
                const modal = document.getElementById("image-modal");
                if (modal && !modal.classList.contains("hidden")) {
                    closeImageModal();
                }
            }
        });

        function showMedia(event, category, fileId, displayName, url, mediaType) {
            event.preventDefault();

            const viewerId = "viewer-" + category;
            const viewer = document.getElementById(viewerId);
            if (!viewer) return false;

            if (viewer.dataset.currentId === fileId && viewer.style.display === "block") {
                viewer.innerHTML = "";
                viewer.style.display = "none";
                viewer.dataset.currentId = "";
                return false;
            }

            viewer.dataset.currentId = fileId;
            viewer.innerHTML = ""; // Clear previous content

            const lowerMediaType = (mediaType || "").toLowerCase();
            const fileExtension = displayName.includes(".") ? displayName.split(".").pop().toLowerCase() : "";
            let html = "";

            if (lowerMediaType.startsWith("audio/")) {
                html = `<audio controls autoplay style="width: 100%;">
                          <source src="${url}" type="${mediaType || "audio/" + fileExtension}">
                          Your browser does not support the audio tag.
                        </audio>`;
            } else if (lowerMediaType.startsWith("video/")) {
                html = `<video controls autoplay style="width: 100%; max-height: 400px;">
                          <source src="${url}" type="${mediaType || "video/" + fileExtension}">
                        </video>`;
            } else if (lowerMediaType === "application/pdf") {
                html = `<iframe src="${url}" style="width: 100%; height: 600px; border-radius: 8px;" frameborder="0"></iframe>`;
            } else if (fileExtension === "pdf" && !lowerMediaType) {
                // Fallback for PDF if mediaType unknown
                html = `<iframe src="${url}" style="width: 100%; height: 600px; border-radius: 8px;" frameborder="0"></iframe>`;
            }
            // Add more specific handlers based on mediaType or extension if needed
            // e.g. for text files:
            // else if (lowerMediaType.startsWith("text/")) {
            //    html = `<iframe src="${url}" style="width: 100%; height: 400px; border: 1px solid #ccc;"></iframe>`;
            // }
            else {
                html = `<p class="text-gray-700 dark:text-gray-300">${i18nNoPreview} <a href="${url}" target="_blank" rel="noopener noreferrer" class="text-blue-700 dark:text-blue-400 underline">${i18nOpenFile} (${displayName})</a></p>`;
            }

            if (html) {
                viewer.innerHTML = html;
                viewer.style.display = "block";
                viewer.scrollIntoView({ behavior: "smooth", block: "center" });
            } else {
                // If no specific preview, perhaps just open the link or show a message
                window.open(url, "_blank");
            }

            return false;
        }
    </script>
</Layout>
