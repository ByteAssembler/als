---
// import "@/styles/globals.css"
// import "../../styles/global.css";
import "../../styles/globals.css";

import prisma from "../../utils/db";
import AdminSite from "@/components/AdminSite.astro";
import AdminSiteEntry from "@/components/AdminSiteEntry.astro";
import AdminSiteStack from "@/components/AdminSiteStack.astro";
import AdminContent from "@/components/AdminContent.astro";

const [sites, sections, contents] = await prisma.$transaction([
	prisma.site.findMany(),
	prisma.section.findMany(),
	prisma.sectionContens.findMany(),
]);

const selectedSiteId = Astro.url.searchParams.get("siteId");
const selectedSectionId = Astro.url.searchParams.get("sectionId");
const selectedContentLangCode = Astro.url.searchParams.get("langCode");

const selectedSite = sites.find((site) => site.id === selectedSiteId);
const selectedSection = sections.find(
	(section) => section.id === selectedSectionId
);
const selectedContent = contents.find(
	(content) =>
		content.sectionId === selectedSectionId &&
		content.langCode === selectedContentLangCode
);
---

<!doctype html>
<html lang="en" class="dark h-full w-full">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
	</head>
	<body class="h-full w-full">
		<main id="sites-container" class="flex h-full w-full">
			<AdminSiteStack>
				<AdminSite title="Sites">
					{
						sites.map((site) => (
							<AdminSiteEntry
								content={site.title}
								selected={site.id === selectedSiteId}
								id={`site-${site.id}`}
								href={`/admin/sites?siteId=${site.id}`}
								dataSiteId={site.id}
							>
								{site.title}
							</AdminSiteEntry>
						))
					}
				</AdminSite>
			</AdminSiteStack>
			<AdminSiteStack>
				<AdminSite title="Sections" className="border-b">
					{
						selectedSite ? (
							sections
								.filter(
									(section) =>
										section.siteId === selectedSite.id
								)
								.map((section) => (
									<AdminSiteEntry
										content={section.title}
										selected={
											section.id === selectedSectionId
										}
										id={`section-${section.id}`}
										href={`/admin/sites?siteId=${selectedSite.id}&sectionId=${section.id}`}
										dataSiteId={selectedSite.id}
										dataSectionId={section.id}
									>
										{section.title}
									</AdminSiteEntry>
								))
						) : (
							<p>Select a site to view sections</p>
						)
					}
				</AdminSite>
				{
					selectedSite && selectedSection && (
						<AdminSite title="Contents">
							{contents
								.filter(
									(content) =>
										content.sectionId === selectedSection.id
								)
								.map((content) => (
									<AdminSiteEntry
										content={content.langCode}
										selected={
											content.langCode ===
											selectedContentLangCode
										}
										id={`content-${content.langCode}`}
										href={`/admin/sites?siteId=${selectedSite.id}&sectionId=${selectedSection.id}&langCode=${content.langCode}`}
										dataSiteId={selectedSite.id}
										dataSectionId={selectedSection.id}
										dataLangCode={content.langCode}
									>
										{content.langCode}
									</AdminSiteEntry>
								))}
						</AdminSite>
					)
				}
			</AdminSiteStack>
			<div style="flex: 2;" class="h-full overflow-auto">
				{
					selectedSection ? (
						<AdminContent
							site={selectedSite}
							section={selectedSection}
							content={selectedContent}
							selectedSiteId={selectedSiteId}
							selectedSectionId={selectedSectionId}
							selectedContentLangCode={selectedContentLangCode}
						/>
					) : (
						<div class="flex h-full items-center justify-center">
							<p class="text-muted-foreground">
								Select a site, a section, and a content to view
								details
							</p>
						</div>
					)
				}
			</div>
		</main>
	</body>
</html>
