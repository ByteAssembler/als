---
import ScDescription from "@/components/ScDescription.astro";
import ScTextarea from "@/components/ScTextarea.astro";

const site = Astro.props.site;
const section = Astro.props.section;
const content = Astro.props.content;

const selectedSiteId = Astro.props.selectedSiteId;
const selectedSectionId = Astro.props.selectedSectionId;
const selectedContentLangCode = Astro.props.selectedContentLangCode;

const edit: "section" | "content" =
	selectedContentLangCode == null ? "section" : "content";
---

<div
	class="mx-auto mb-12 flex max-w-screen-lg flex-col overflow-auto px-4"
	id="editor"
	data-edit-type={edit}
>
	{
		edit === "section" && (
			<>
				<ScDescription> HTML Code </ScDescription>
				<ScTextarea
					id="code-html"
					placeholder={'<div class="class">{{KEY}}</div>'}
					rows="8"
					description="Everywhere where {{KEY}} is found, it will be replaced with the value from the key-value pairs below."
				/>

				<ScDescription> CSS Code </ScDescription>
				<ScTextarea
					id="code-css"
					placeholder=".class { color: red; }"
					rows="8"
				/>
			</>
		)
	}

	<ScDescription> Language Key-Value Pairs </ScDescription>
	<div id="language-key-value-pairs"></div>

	<ScDescription> Save </ScDescription>
	<div
		id="save-box"
		class="flex select-none flex-col items-center justify-center"
	>
		<div>
			<button
				id="save-button"
				class:list={[
					"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
					"bg-primary text-primary-foreground shadow hover:bg-primary/90",
					"h-9 px-4 py-2",
				]}
			>
				Save
			</button>
			<button
				id="save-button-loading"
				class="inline-flex h-9 items-center justify-center gap-2 whitespace-nowrap rounded-md bg-primary px-4 py-2 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
				disabled
				style="display: none; pointer-events: none;"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="lucide lucide-loader-circle animate-spin"
				>
					<path d="M21 12a9 9 0 1 1-6.219-8.56"></path>
				</svg>
				Please wait
			</button>
			<button
				id="save-button-error"
				class="inline-flex h-9 items-center justify-center gap-2 whitespace-nowrap rounded-md bg-destructive px-4 py-2 text-sm font-medium text-destructive-foreground shadow-sm transition-colors hover:bg-destructive/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
				style="display: none; pointer-events: none;"
			>
				Error
			</button>
			<button
				id="save-button-warning"
				class="bg-warning text-warning-foreground hover:bg-warning/90 inline-flex h-9 items-center justify-center gap-2 whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
				style="display: none; pointer-events: none;"
			>
				Warning
			</button>
			<button
				id="save-button-success"
				class="bg-success text-success-foreground hover:bg-success/90 inline-flex h-9 items-center justify-center gap-2 whitespace-nowrap rounded-md px-4 py-2 text-sm font-medium shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0"
				style="display: none; pointer-events: none;"
			>
				Saved
			</button>
		</div>
		<p
			class="mt-2 text-sm text-destructive"
			id="save-message-box"
			style="display: none;"
		>
			An error occurred while saving. Please try again.
		</p>
	</div>
</div>

<script type="module" defer>
	const editType = document.getElementById("editor").dataset.editType;

	const codeHtmlEle = document.getElementById("code-html");
	const codeCssEle = document.getElementById("code-css");
	const tableEle = document.getElementById("language-key-value-pairs");

	const saveButtonEle = document.getElementById("save-button");
	const saveButtonLoadingEle = document.getElementById("save-button-loading");
	const saveButtonErrorEle = document.getElementById("save-button-error");
	const saveButtonSuccessEle = document.getElementById("save-button-success");
	const saveButtonWarningEle = document.getElementById("save-button-warning");
	const saveMessageBox = document.getElementById("save-message-box");

	let savingStatus = "idle"; // idle, loading, saved, warning, error
	let savingStatusIntervalId = undefined;

	const showValue = editType === "content";
	const saveURL =
		editType === "section" ? "/api/save-section" : "/api/save-content";

	////////////////////////////////////////////////
	////////////////////////////////////////////////

	// Schema { key: string, value: string }[]
	let tableData = {};

	function createTable(captionText, data) {
		const table = document.createElement("table");
		table.className = "w-full caption-bottom text-sm";

		if (captionText) {
			const caption = document.createElement("caption");
			caption.className = "mt-4 text-sm text-muted-foreground";
			caption.textContent = captionText;
			table.appendChild(caption);
		}

		const thead = document.createElement("thead");
		thead.className = "[&_tr]:border-b";
		const headerRow = document.createElement("tr");
		headerRow.className =
			"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted";

		const headers = ["Key", showValue && "Value", "Delete"].filter(Boolean);

		headers.forEach((headerText) => {
			const th = document.createElement("th");
			th.className =
				"h-10 px-2 text-left align-middle font-medium text-muted-foreground";
			if (headerText === "Key") th.style.width = "30%";
			if (headerText === "Delete") th.style.width = "0%";
			th.textContent = headerText;
			headerRow.appendChild(th);
		});

		thead.appendChild(headerRow);
		table.appendChild(thead);

		const tbody = document.createElement("tbody");
		tbody.className = "[&_tr:last-child]:border-0";

		Object.entries(data).forEach(([key, value]) => {
			const row = document.createElement("tr");
			row.className =
				"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted";

			{
				const td = document.createElement("td");
				td.className = "py-1.5 px-2 align-middle";

				const input = document.createElement("input");
				input.className =
					"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm";
				input.value = String(key);
				input.placeholder =
					"A key that will be later replaced in the HTML Code";

				td.appendChild(input);

				row.appendChild(td);
			}

			if (showValue) {
				const td = document.createElement("td");
				td.className = "py-1.5 px-2 align-middle";

				const textarea = document.createElement("textarea");
				textarea.className =
					"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm";
				textarea.value = String(value);
				textarea.placeholder =
					"Enter a value that will be later in the HTML Code replace with the key";

				td.appendChild(textarea);

				row.appendChild(td);
			}

			{
				const td = document.createElement("td");
				td.className = "py-1.5 px-2 align-middle";

				const button = document.createElement("button");
				button.className = [
					"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
					"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
					"h-9 w-9",
				].join(" ");
				button.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"/><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/><line x1="10" x2="10" y1="11" y2="17"/><line x1="14" x2="14" y1="11" y2="17"/></svg>`;

				button.addEventListener("click", () => deleteTableEntry(key));

				td.appendChild(button);

				row.appendChild(td);
			}

			tbody.appendChild(row);
		});

		// Add a add button to add a new entry
		const row = document.createElement("tr");
		row.className =
			"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted";

		{
			const td = document.createElement("td");
			td.className = "py-1.5 px-2 align-middle";
			td.colSpan = showValue ? 3 : 2;

			const tdDiv = document.createElement("div");
			tdDiv.className = "flex items-center justify-center";

			const button = document.createElement("button");
			button.className = [
				"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
				"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
				"h-8 rounded-md px-3 text-x",
			].join(" ");
			button.textContent = "Add a new entry";

			button.addEventListener("click", addNewTableEntry);

			tdDiv.appendChild(button);

			td.appendChild(tdDiv);

			row.appendChild(td);
		}

		tbody.appendChild(row);

		table.appendChild(tbody);

		return table;
	}

	function rerenderTable() {
		const table = createTable(undefined, tableData);

		tableEle.innerHTML = "";
		tableEle.appendChild(table);
	}

	function addNewTableEntry() {
		const newData = convertTableToData();
		delete tableData[""];
		tableData = newData;

		tableData[""] = "";

		rerenderTable();
	}

	function deleteTableEntry(key) {
		delete tableData[key];
		rerenderTable();
	}

	function convertTableToData() {
		const rows = tableEle.querySelectorAll("tbody tr");

		const newData = {};

		rows.forEach((row) => {
			const [keyInput, valueInput] =
				row.querySelectorAll("input, textarea");

			if (keyInput) {
				const key = keyInput.value.trim();
				const value = valueInput?.value?.trim() || "";

				if (key.length > 0) {
					newData[key] = value;
				}
			}
		});

		return newData;
	}

	////////////////////////////////////////////////
	////////////////////////////////////////////////

	function setStatus(s, interval = true) {
		savingStatus = s;

		if (s === "saved") {
			saveButtonEle.style.display = "none";
			saveButtonLoadingEle.style.display = "none";
			saveButtonErrorEle.style.display = "none";
			saveButtonSuccessEle.style.display = "inline-flex";
			saveButtonWarningEle.style.display = "none";
			saveMessageBox.style.display = "none";
		} else if (s === "loading") {
			saveButtonEle.style.display = "none";
			saveButtonLoadingEle.style.display = "inline-flex";
			saveButtonErrorEle.style.display = "none";
			saveButtonSuccessEle.style.display = "none";
			saveButtonWarningEle.style.display = "none";
			saveMessageBox.style.display = "none";
		} else if (s === "error") {
			saveButtonEle.style.display = "none";
			saveButtonLoadingEle.style.display = "none";
			saveButtonErrorEle.style.display = "inline-flex";
			saveButtonSuccessEle.style.display = "none";
			saveButtonWarningEle.style.display = "none";
			saveMessageBox.style.display = "block";
		} else if (s === "warning") {
			saveButtonEle.style.display = "none";
			saveButtonLoadingEle.style.display = "none";
			saveButtonErrorEle.style.display = "none";
			saveButtonSuccessEle.style.display = "none";
			saveButtonWarningEle.style.display = "inline-flex";
			saveMessageBox.style.display = "block";
		} else {
			saveButtonEle.style.display = "inline-flex";
			saveButtonLoadingEle.style.display = "none";
			saveButtonErrorEle.style.display = "none";
			saveButtonSuccessEle.style.display = "none";
			saveButtonWarningEle.style.display = "none";
			saveMessageBox.style.display = "none";
		}

		clearInterval(savingStatusIntervalId);

		if (interval && s !== "idle") {
			savingStatusIntervalId = setInterval(async () => {
				if (savingStatus !== "idle") {
					setStatus("idle", false);
				}
			}, 2500);
		}
	}

	async function saveEverything() {
		const data = getData();

		function onFail() {
			setStatus("error");
		}

		setStatus("loading");

		try {
			const response = await fetch(saveURL, {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(data),
			});

			await new Promise((resolve) => setTimeout(resolve, 1000));

			console.log(response);

			if (response.ok) {
				setStatus("saved");
			} else {
				onFail();
			}
		} catch {
			onFail();
		}
	}

	saveButtonEle.addEventListener("click", saveEverything);

	rerenderTable();

	function getData() {
		if (editType === "section") {
			return {
				html: codeHtmlEle.value,
				css: codeCssEle.value,
				data: convertTableToData(),
			};
		} else {
			return {
				data: convertTableToData(),
			};
		}
	}
</script>
